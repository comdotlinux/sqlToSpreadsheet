<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <description>
        Simple Spring Batch Configuration
        
        - one tasklet step
        - prints out "Hello World!"
        - setup without database, uses in-memory JobRepository
        - not restartable
    </description>

    <batch:job id="sqlToSpreadsheetJob">
        <batch:step id="stepOne">
            <batch:tasklet>
                <batch:chunk commit-interval="1" reader="itemReader" processor="dbQueryProcessor" writer="spreadsheetWriter"/>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="strict" value="true"/>
        <property name="comments" value="#"/>
        <property name="lineMapper" ref="lineMapper"/>
        <property name="resource" value="file:#{jobParameters['input.file.name']}"/>
        <property name="encoding" value="UTF-8"/>
    </bean>
    
    <bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                <property name="delimiter" value=":"/>
                <property name="names" value="#{columnNames.toArray(new java.lang.String[0])}"/>
            </bean>
        </property>
        <property name="fieldSetMapper">
            <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                <property name="prototypeBeanName" value="queryData"/>
            </bean>
        </property>
    </bean>
    
    <bean id="queryData" class="com.linux.batch.QueryData" scope="prototype"/>
    
    <util:list id="columnNames">
        <value>outputfilename</value>
        <value>sqlquery</value>
    </util:list>
    
    
    <bean id="dbQueryProcessor" class="com.linux.batch.DatabaseQueryRunProcessor" scope="step">
          <constructor-arg ref="jdbcTemplate"/>
    </bean>
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
        <constructor-arg name="lazyInit" value="true"/>
    </bean>
    
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>
    
    <bean id="spreadsheetWriter" class="com.linux.batch.SpreadsheetWriter" scope="step">
        <constructor-arg name="outputDirectory" value="#{jobParameters['output.dir']}"/>
    </bean>
	
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
    
    
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <context:property-placeholder location="classpath:application.properties"/>
</beans>